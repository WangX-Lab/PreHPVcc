devtools::build()
devtools::check()
library(roxygen2)
devtools::check()
devtools::check()
load(file = "F:/CESC/文章/返修2021-12-12/PreHPVs/data/training_data.rda")
load(file = "F:/CESC/文章/返修2021-12-12/PreHPVs/data/features.rda")
feature = features
feature = fetures
usethis::use_data(training_data,feature,internal = TRUE)
usethis::use_data(training_data,feature,internal = TRUE)
save(feature,file = "F:/PreHPVs/data/feature.rda")
save(training_data,file = "F:/PreHPVs/data/training_data.rda")
devtools::check()
a <- read.table("F:/PreHPVs/inst/extdata/example.txt", stringsAsFactors = FALSE, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
View(a)
usethis::use_gpl3_license()
hpv_pre <- function(input_data) {
## Check arguments
if (missing(input_data) || !class(input_data) %in% c("matrix", "data.frame") || dim(input_data)[2] < 5)
stop("'input_data' is missing or incorrect")
## Predict HPV+
if (dim(input_data)[2] != dim(training_data)[2] - 1) {
training_data <- training_data[,c(1, match(colnames(input_data), colnames(training_data)))]
}
if (dim(input_data)[1] != 1) {
training_data[-1] <- apply(training_data[-1], 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
}
set.seed(1)
knn.pred <- knn(training_data[,-1], input_data, training_data[,1], k = 5, prob = TRUE)
result <- data.frame(Sample = rownames(input_data), MSI_status = knn.pred, check.names = FALSE)
return(result)
}
#' @param input.path The input file is a tab-delimited text file containing the gene expression profiling data in which each row is a gene and each column is a tumor sample.
#' @param type Character string indicating which gene identifier to use when matching.
#'
#' @return A m*n matrix contains the expression values of n matched genes in m tumor samples.
#' @export
#'
#' @author  Shengwei Li <lishengwei98@@163.com>, Xiaosheng Wang <xiaosheng.wang@@cpu.edu.cn>
#' @examples
#' path = system.file("extdata", "example.txt", package = "PreHPVs", mustWork = TRUE)
#' data_pre(path, type = "ID")
data_pre <- function(input.path, type = c("Symbol", "ID")) {
## Check arguments
if (missing(input.path) || class(input.path) != "character")
stop("'input.path' is missing or incorrect")
type <- match.arg(type)
## Read input data
a <- read.table(input.path, stringsAsFactors = FALSE, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
## Filter and min-max scaling
if (TRUE %in% is.na(match(feature[,type], rownames(a)))) {
if (sum(!is.na(match(feature[,type], rownames(a)))) >= 5) {
feature <- feature[!is.na(match(feature[,type], rownames(a))),]
rownames(feature) <- NULL
} else {
stop("Some features of the current test set are missing!")
}
}
a <- a[match(feature[,type], rownames(a)),, drop = FALSE]
if (FALSE %in% complete.cases(a))
stop("Predictor variables with missing values are presented in the current test set")
if (dim(a)[2] != 1) {
a <- apply(t(a), 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
a[is.nan(a)] <- 1
} else {
a <- t(a)
}
if (type == "ID") {
colnames(a) <- as.character(feature[,"Symbol"])
}
return(a)
}
devtools::document()
utils::globalVariables(c("feature", "training_data"))
devtools::check()
hpv_pre <- function(input_data) {
## Check arguments
if (missing(input_data) || !class(input_data) %in% c("matrix", "data.frame") || dim(input_data)[2] < 5)
stop("'input_data' is missing or incorrect")
## Predict HPV+
if (dim(input_data)[2] != dim(training_data)[2] - 1) {
training_data <- training_data[,c(1, match(colnames(input_data), colnames(training_data)))]
}
if (dim(input_data)[1] != 1) {
training_data[-1] <- apply(training_data[-1], 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
}
set.seed(1)
knn.pred <- knn(training_data[,-1], input_data, training_data[,1], k = 5, prob = TRUE)
result <- data.frame(Sample = rownames(input_data), MSI_status = knn.pred, check.names = FALSE)
return(result)
}
#' @param input.path The input file is a tab-delimited text file containing the gene expression profiling data in which each row is a gene and each column is a tumor sample.
#' @param type Character string indicating which gene identifier to use when matching.
#'
#' @return A m*n matrix contains the expression values of n matched genes in m tumor samples.
#' @export
#'
#' @author  Shengwei Li <lishengwei98@@163.com>, Xiaosheng Wang <xiaosheng.wang@@cpu.edu.cn>
#' @examples
#' path = system.file("extdata", "example.txt", package = "PreHPVs", mustWork = TRUE)
#' data_pre(path, type = "ID")
data_pre <- function(input.path, type = c("Symbol", "ID")) {
## Check arguments
if (missing(input.path) || class(input.path) != "character")
stop("'input.path' is missing or incorrect")
type <- match.arg(type)
## Read input data
a <- read.table(input.path, stringsAsFactors = FALSE, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
## Filter and min-max scaling
if (TRUE %in% is.na(match(feature[,type], rownames(a)))) {
if (sum(!is.na(match(feature[,type], rownames(a)))) >= 5) {
feature <- feature[!is.na(match(feature[,type], rownames(a))),]
rownames(feature) <- NULL
} else {
stop("Some features of the current test set are missing!")
}
}
a <- a[match(feature[,type], rownames(a)),, drop = FALSE]
if (FALSE %in% complete.cases(a))
stop("Predictor variables with missing values are presented in the current test set")
if (dim(a)[2] != 1) {
a <- apply(t(a), 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
a[is.nan(a)] <- 1
} else {
a <- t(a)
}
if (type == "ID") {
colnames(a) <- as.character(feature[,"Symbol"])
}
return(a)
}
roxygenize("PreHPVs")
roxygenize("F:/PreHPVs")
roxygenize("F:/PreHPVs")
roxygenize("F:/PreHPVs")
roxygenize("F:/PreHPVs")
roxygenize("F:/PreHPVs")
roxygenize("F:/PreHPVs")
devtools::check()
devtools::check()
devtools::check()
system.file("extdata", "example.txt", package = "PreMSIm", mustWork = TRUE)
path = "F:/PreHPVs/inst/extdata/example.txt"
#' @param input.path The input file is a tab-delimited text file containing the gene expression profiling data in which each row is a gene and each column is a tumor sample.
#' @param type Character string indicating which gene identifier to use when matching.
#'
#' @return A m*n matrix contains the expression values of n matched genes in m tumor samples.
#' @export
#'
#' @author  Shengwei Li <lishengwei98@@163.com>, Xiaosheng Wang <xiaosheng.wang@@cpu.edu.cn>
#' @examples
#' path = system.file("extdata", "example.txt", package = "PreHPVs", mustWork = TRUE)
#' data_pre(path, type = "ID")
data_pre <- function(input.path, type = c("Symbol", "ID")) {
## Check arguments
if (missing(input.path) || class(input.path) != "character")
stop("'input.path' is missing or incorrect")
type <- match.arg(type)
## Read input data
a <- read.table(input.path, stringsAsFactors = FALSE, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
## Filter and min-max scaling
if (TRUE %in% is.na(match(feature[,type], rownames(a)))) {
if (sum(!is.na(match(feature[,type], rownames(a)))) >= 5) {
feature <- feature[!is.na(match(feature[,type], rownames(a))),]
rownames(feature) <- NULL
} else {
stop("Some features of the current test set are missing!")
}
}
a <- a[match(feature[,type], rownames(a)),, drop = FALSE]
if (FALSE %in% complete.cases(a))
stop("Predictor variables with missing values are presented in the current test set")
if (dim(a)[2] != 1) {
a <- apply(t(a), 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
a[is.nan(a)] <- 1
} else {
a <- t(a)
}
if (type == "ID") {
colnames(a) <- as.character(feature[,"Symbol"])
}
return(a)
}
input_data = data_pre(path, type = "ID")
View(input_data)
hpv_pre <- function(input_data) {
## Check arguments
if (missing(input_data) || !class(input_data) %in% c("matrix", "data.frame") || dim(input_data)[2] < 5)
stop("'input_data' is missing or incorrect")
## Predict HPV+
if (dim(input_data)[2] != dim(training_data)[2] - 1) {
training_data <- training_data[,c(1, match(colnames(input_data), colnames(training_data)))]
}
if (dim(input_data)[1] != 1) {
training_data[-1] <- apply(training_data[-1], 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
}
set.seed(1)
knn.pred <- knn(training_data[,-1], input_data, training_data[,1], k = 5, prob = TRUE)
result <- data.frame(Sample = rownames(input_data), MSI_status = knn.pred, check.names = FALSE)
return(result)
}
output_data = hpv_pre(input_data)
View(output_data)
View(output_data)
View(input_data)
View(output_data)
path = "F:/PreHPVs/inst/extdata/example.txt"
input_data = data_pre(path, type = "ID")
output_data = hpv_pre(input_data)
View(output_data)
path = "F:/PreHPVs/inst/extdata/example.txt"
#' @param input.path The input file is a tab-delimited text file containing the gene expression profiling data in which each row is a gene and each column is a tumor sample.
#' @param type Character string indicating which gene identifier to use when matching.
#'
#' @return A m*n matrix contains the expression values of n matched genes in m tumor samples.
#' @export
#'
#' @author  Shengwei Li <lishengwei98@@163.com>, Xiaosheng Wang <xiaosheng.wang@@cpu.edu.cn>
#' @examples
#' path = system.file("extdata", "example.txt", package = "PreHPVs", mustWork = TRUE)
#' data_pre(path, type = "ID")
data_pre <- function(input.path, type = c("Symbol", "ID")) {
## Check arguments
if (missing(input.path) || class(input.path) != "character")
stop("'input.path' is missing or incorrect")
type <- match.arg(type)
## Read input data
a <- read.table(input.path, stringsAsFactors = FALSE, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
## Filter and min-max scaling
if (TRUE %in% is.na(match(feature[,type], rownames(a)))) {
if (sum(!is.na(match(feature[,type], rownames(a)))) >= 5) {
feature <- feature[!is.na(match(feature[,type], rownames(a))),]
rownames(feature) <- NULL
} else {
stop("Some features of the current test set are missing!")
}
}
a <- a[match(feature[,type], rownames(a)),, drop = FALSE]
if (FALSE %in% complete.cases(a))
stop("Predictor variables with missing values are presented in the current test set")
if (dim(a)[2] != 1) {
a <- apply(t(a), 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
a[is.nan(a)] <- 1
} else {
a <- t(a)
}
if (type == "ID") {
colnames(a) <- as.character(feature[,"Symbol"])
}
return(a)
}
hpv_pre <- function(input_data) {
## Check arguments
if (missing(input_data) || !class(input_data) %in% c("matrix", "data.frame") || dim(input_data)[2] < 5)
stop("'input_data' is missing or incorrect")
## Predict HPV+
if (dim(input_data)[2] != dim(training_data)[2] - 1) {
training_data <- training_data[,c(1, match(colnames(input_data), colnames(training_data)))]
}
if (dim(input_data)[1] != 1) {
training_data[-1] <- apply(training_data[-1], 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
}
set.seed(1)
knn.pred <- knn(training_data[,-1], input_data, training_data[,1], k = 5, prob = TRUE)
result <- data.frame(Sample = rownames(input_data),HPV_status = knn.pred, check.names = FALSE)
return(result)
}
input_data = data_pre(path, type = "ID")
output_data = hpv_pre(input_data)
View(output_data)
roxygenize("F:/PreHPVs")
devtools::check()
#' @param input.path The input file is a tab-delimited text file containing the gene expression profiling data in which each row is a gene and each column is a tumor sample.
#' @param type Character string indicating which gene identifier to use when matching.
#'
#' @return A m*n matrix contains the expression values of n matched genes in m tumor samples.
#' @export
#'
#' @author  Shengwei Li <lishengwei98@@163.com>, Xiaosheng Wang <xiaosheng.wang@@cpu.edu.cn>
#' @examples
#' path = system.file("extdata", "example.txt", package = "PreHPVs", mustWork = TRUE)
#' data_pre(path, type = "ID")
data_pre <- function(input.path, type = c("Symbol", "ID")) {
## Check arguments
if (missing(input.path) || class(input.path) != "character")
stop("'input.path' is missing or incorrect")
type <- match.arg(type)
## Read input data
a <- read.table(input.path, stringsAsFactors = FALSE, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
## Filter and min-max scaling
if (TRUE %in% is.na(match(feature[,type], rownames(a)))) {
if (sum(!is.na(match(feature[,type], rownames(a)))) >= 5) {
feature <- feature[!is.na(match(feature[,type], rownames(a))),]
rownames(feature) <- NULL
} else {
stop("Some features of the current test set are missing!")
}
}
a <- a[match(feature[,type], rownames(a)),, drop = FALSE]
if (FALSE %in% complete.cases(a))
stop("Predictor variables with missing values are presented in the current test set")
if (dim(a)[2] != 1) {
a <- apply(t(a), 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
a[is.nan(a)] <- 1
} else {
a <- t(a)
}
if (type == "ID") {
colnames(a) <- as.character(feature[,"Symbol"])
}
return(a)
}
hpv_pre <- function(input_data) {
## Check arguments
if (missing(input_data) || !class(input_data) %in% c("matrix", "data.frame") || dim(input_data)[2] < 5)
stop("'input_data' is missing or incorrect")
## Predict HPV+
if (dim(input_data)[2] != dim(training_data)[2] - 1) {
training_data <- training_data[,c(1, match(colnames(input_data), colnames(training_data)))]
}
if (dim(input_data)[1] != 1) {
training_data[-1] <- apply(training_data[-1], 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
}
set.seed(1)
knn.pred <- knn(training_data[,-1], input_data, training_data[,1], k = 5, prob = TRUE)
result <- data.frame(Sample = rownames(input_data),HPV_status = knn.pred, check.names = FALSE)
return(result)
}
roxygenize("F:/PreHPVs")
load_all()
library(roxygen2)
utils::globalVariables(c("feature", "training_data"))
roxygenize("F:/PreHPVs")
devtools::check()
devtools::load_all(
）
devtools::load_all()
#' @param input.path The input file is a tab-delimited text file containing the gene expression profiling data in which each row is a gene and each column is a tumor sample.
#' @param type Character string indicating which gene identifier to use when matching.
#'
#' @return A m*n matrix contains the expression values of n matched genes in m tumor samples.
#' @export
#'
#' @author  Shengwei Li <lishengwei98@@163.com>, Xiaosheng Wang <xiaosheng.wang@@cpu.edu.cn>
#' @examples
#' path = system.file("extdata", "example.txt", package = "PreHPVs", mustWork = TRUE)
#' data_pre(path, type = "ID")
data_pre <- function(input.path, type = c("Symbol", "ID")) {
## Check arguments
if (missing(input.path) || class(input.path) != "character")
stop("'input.path' is missing or incorrect")
type <- match.arg(type)
## Read input data
a <- read.table(input.path, stringsAsFactors = FALSE, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
## Filter and min-max scaling
if (TRUE %in% is.na(match(feature[,type], rownames(a)))) {
if (sum(!is.na(match(feature[,type], rownames(a)))) >= 5) {
feature <- feature[!is.na(match(feature[,type], rownames(a))),]
rownames(feature) <- NULL
} else {
stop("Some features of the current test set are missing!")
}
}
a <- a[match(feature[,type], rownames(a)),, drop = FALSE]
if (FALSE %in% complete.cases(a))
stop("Predictor variables with missing values are presented in the current test set")
if (dim(a)[2] != 1) {
a <- apply(t(a), 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
a[is.nan(a)] <- 1
} else {
a <- t(a)
}
if (type == "ID") {
colnames(a) <- as.character(feature[,"Symbol"])
}
return(a)
}
hpv_pre <- function(input_data) {
## Check arguments
if (missing(input_data) || !class(input_data) %in% c("matrix", "data.frame") || dim(input_data)[2] < 5)
stop("'input_data' is missing or incorrect")
## Predict HPV+
if (dim(input_data)[2] != dim(training_data)[2] - 1) {
training_data <- training_data[,c(1, match(colnames(input_data), colnames(training_data)))]
}
if (dim(input_data)[1] != 1) {
training_data[-1] <- apply(training_data[-1], 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
}
set.seed(1)
knn.pred <- knn(training_data[,-1], input_data, training_data[,1], k = 5, prob = TRUE)
result <- data.frame(Sample = rownames(input_data),HPV_status = knn.pred, check.names = FALSE)
return(result)
}
devtools::load_all()
load("F:/PreHPVs/R/sysdata.rda")
roxygenize("F:/PreHPVs")
devtools::check()
#' @param input.path The input file is a tab-delimited text file containing the gene expression profiling data in which each row is a gene and each column is a tumor sample.
#' @param type Character string indicating which gene identifier to use when matching.
#'
#' @return A m*n matrix contains the expression values of n matched genes in m tumor samples.
#' @export
#'
#' @author  Shengwei Li <lishengwei98@@163.com>, Xiaosheng Wang <xiaosheng.wang@@cpu.edu.cn>
#' @examples
#' path = system.file("extdata", "example.txt", package = "PreHPVs", mustWork = TRUE)
#' data_pre(path, type = "ID")
data_pre <- function(input.path, type = c("Symbol", "ID")) {
## Check arguments
if (missing(input.path) || class(input.path) != "character")
stop("'input.path' is missing or incorrect")
type <- match.arg(type)
## Read input data
a <- read.table(input.path, stringsAsFactors = FALSE, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
## Filter and min-max scaling
if (TRUE %in% is.na(match(feature[,type], rownames(a)))) {
if (sum(!is.na(match(feature[,type], rownames(a)))) >= 5) {
feature <- feature[!is.na(match(feature[,type], rownames(a))),]
rownames(feature) <- NULL
} else {
stop("Some features of the current test set are missing!")
}
}
a <- a[match(feature[,type], rownames(a)),, drop = FALSE]
if (FALSE %in% complete.cases(a))
stop("Predictor variables with missing values are presented in the current test set")
if (dim(a)[2] != 1) {
a <- apply(t(a), 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
a[is.nan(a)] <- 1
} else {
a <- t(a)
}
if (type == "ID") {
colnames(a) <- as.character(feature[,"Symbol"])
}
return(a)
}
hpv_pre <- function(input_data) {
## Check arguments
if (missing(input_data) || !class(input_data) %in% c("matrix", "data.frame") || dim(input_data)[2] < 5)
stop("'input_data' is missing or incorrect")
## Predict HPV+
if (dim(input_data)[2] != dim(training_data)[2] - 1) {
training_data <- training_data[,c(1, match(colnames(input_data), colnames(training_data)))]
}
if (dim(input_data)[1] != 1) {
training_data[-1] <- apply(training_data[-1], 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
}
set.seed(1)
knn.pred <- knn(training_data[,-1], input_data, training_data[,1], k = 5, prob = TRUE)
result <- data.frame(Sample = rownames(input_data),HPV_status = knn.pred, check.names = FALSE)
return(result)
}
devtools::document()
devtools::document()
roxygenize("F:/PreHPVs")
devtools::document()
roxygenize("F:/PreHPVs")
devtools::check()
devtools::document()
roxygenize("F:/PreHPVs")
devtools::check()
devtools::build("F:/PreHPVs")
devtools::install()
library(PreHPVs)
library(roxygen2)
devtools::document()
roxygenize("F:/PreHPVs")
devtools::build("F:/PreHPV_CC")
devtools::check()
library(roxygen2)
devtools::document()
roxygenize("F:/PreHPVs")
devtools::check()
library(roxygen2)
devtools::document()
roxygenize("F:/PreHPVs")
devtools::check()
.Last.error.trace
library(roxygen2)
devtools::document()
roxygenize("F:/PreHPVs")
devtools::check()
